{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ProductsService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = 'http://localhost:8080/api/foods';\n  }\n  addProduct(formData, token) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.post(`${this.baseUrl}`, formData, {\n      headers,\n      responseType: 'text'\n    });\n  }\n  getAllFoods(token) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.get(this.baseUrl, {\n      headers\n    }).pipe(map(foods => foods.map(food => ({\n      ...food,\n      picture: food.picture ? this.convertToBase64(food.picture) : null\n    }))));\n  }\n  updateProduct(id, food, token) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.put(`${this.baseUrl}/${id}`, food, {\n      headers\n    });\n  }\n  deleteProduct(id, token) {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n    return this.http.delete(`${this.baseUrl}/${id}`, {\n      headers\n    });\n  }\n  convertToBase64(picture) {\n    // This method converts the binary data to a Base64-encoded string\n    const binaryString = window.atob(picture);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    const blob = new Blob([bytes], {\n      type: 'image/png'\n    });\n    return URL.createObjectURL(blob);\n  }\n  static {\n    this.ɵfac = function ProductsService_Factory(t) {\n      return new (t || ProductsService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: ProductsService,\n      factory: ProductsService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","map","ProductsService","constructor","http","baseUrl","addProduct","formData","token","headers","post","responseType","getAllFoods","get","pipe","foods","food","picture","convertToBase64","updateProduct","id","put","deleteProduct","delete","binaryString","window","atob","len","length","bytes","Uint8Array","i","charCodeAt","blob","Blob","type","URL","createObjectURL","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/layth/Desktop/front/front/src/app/pages/products/productsservice.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { map, Observable } from 'rxjs';\nimport { Food } from '../models/food';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ProductsService {\n  private baseUrl = 'http://localhost:8080/api/foods';\n\n  constructor(private http: HttpClient) {}\n\n  addProduct(formData: FormData, token: string): Observable<any> {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.post(`${this.baseUrl}`, formData, { headers, responseType: 'text' });\n  }\n\n  getAllFoods(token: string): Observable<Food[]> {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.get<Food[]>(this.baseUrl, { headers }).pipe(\n      map((foods: Food[]) => foods.map(food => ({\n        ...food,\n        picture: food.picture ? this.convertToBase64(food.picture) : null\n      })))\n    );\n  }\n\n  updateProduct(id: number, food: Food, token: string): Observable<Food> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.put<Food>(`${this.baseUrl}/${id}`, food, { headers });\n  }\n\n  deleteProduct(id: number, token: string): Observable<void> {\n    const headers = new HttpHeaders({\n      'Authorization': `Bearer ${token}`\n    });\n\n    return this.http.delete<void>(`${this.baseUrl}/${id}`, { headers });\n  }\n  private convertToBase64(picture: string): string {\n    // This method converts the binary data to a Base64-encoded string\n    const binaryString = window.atob(picture);\n    const len = binaryString.length;\n    const bytes = new Uint8Array(len);\n    for (let i = 0; i < len; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    const blob = new Blob([bytes], { type: 'image/png' });\n    return URL.createObjectURL(blob);\n  }\n}\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;AAC9D,SAASC,GAAG,QAAoB,MAAM;;;AAMtC,OAAM,MAAOC,eAAe;EAG1BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,OAAO,GAAG,iCAAiC;EAEZ;EAEvCC,UAAUA,CAACC,QAAkB,EAAEC,KAAa;IAC1C,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUQ,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACM,IAAI,CAAC,GAAG,IAAI,CAACL,OAAO,EAAE,EAAEE,QAAQ,EAAE;MAAEE,OAAO;MAAEE,YAAY,EAAE;IAAM,CAAE,CAAC;EACvF;EAEAC,WAAWA,CAACJ,KAAa;IACvB,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUQ,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACS,GAAG,CAAS,IAAI,CAACR,OAAO,EAAE;MAAEI;IAAO,CAAE,CAAC,CAACK,IAAI,CAC1Db,GAAG,CAAEc,KAAa,IAAKA,KAAK,CAACd,GAAG,CAACe,IAAI,KAAK;MACxC,GAAGA,IAAI;MACPC,OAAO,EAAED,IAAI,CAACC,OAAO,GAAG,IAAI,CAACC,eAAe,CAACF,IAAI,CAACC,OAAO,CAAC,GAAG;KAC9D,CAAC,CAAC,CAAC,CACL;EACH;EAEAE,aAAaA,CAACC,EAAU,EAAEJ,IAAU,EAAER,KAAa;IACjD,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUQ,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACiB,GAAG,CAAO,GAAG,IAAI,CAAChB,OAAO,IAAIe,EAAE,EAAE,EAAEJ,IAAI,EAAE;MAAEP;IAAO,CAAE,CAAC;EACxE;EAEAa,aAAaA,CAACF,EAAU,EAAEZ,KAAa;IACrC,MAAMC,OAAO,GAAG,IAAIT,WAAW,CAAC;MAC9B,eAAe,EAAE,UAAUQ,KAAK;KACjC,CAAC;IAEF,OAAO,IAAI,CAACJ,IAAI,CAACmB,MAAM,CAAO,GAAG,IAAI,CAAClB,OAAO,IAAIe,EAAE,EAAE,EAAE;MAAEX;IAAO,CAAE,CAAC;EACrE;EACQS,eAAeA,CAACD,OAAe;IACrC;IACA,MAAMO,YAAY,GAAGC,MAAM,CAACC,IAAI,CAACT,OAAO,CAAC;IACzC,MAAMU,GAAG,GAAGH,YAAY,CAACI,MAAM;IAC/B,MAAMC,KAAK,GAAG,IAAIC,UAAU,CAACH,GAAG,CAAC;IACjC,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,GAAG,EAAEI,CAAC,EAAE,EAAE;MAC5BF,KAAK,CAACE,CAAC,CAAC,GAAGP,YAAY,CAACQ,UAAU,CAACD,CAAC,CAAC;IACvC;IACA,MAAME,IAAI,GAAG,IAAIC,IAAI,CAAC,CAACL,KAAK,CAAC,EAAE;MAAEM,IAAI,EAAE;IAAW,CAAE,CAAC;IACrD,OAAOC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;EAClC;;;uBApDW/B,eAAe,EAAAoC,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAfvC,eAAe;MAAAwC,OAAA,EAAfxC,eAAe,CAAAyC,IAAA;MAAAC,UAAA,EAFd;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}