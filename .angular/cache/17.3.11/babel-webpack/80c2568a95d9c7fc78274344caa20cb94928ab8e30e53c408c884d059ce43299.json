{"ast":null,"code":"import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { booleanAttribute, numberAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n  constructor(elementRef, tree, tabIndex) {\n    super(elementRef, tree);\n    /** Whether the node is disabled. */\n    this.disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/23091\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static {\n    this.ɵfac = function MatTreeNode_Factory(t) {\n      return new (t || MatTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵinjectAttribute('tabindex'));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNode,\n      selectors: [[\"mat-tree-node\"]],\n      hostAttrs: [1, \"mat-tree-node\"],\n      inputs: {\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute],\n        tabIndex: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"tabIndex\", \"tabIndex\", value => value == null ? 0 : numberAttribute(value)]\n      },\n      exportAs: [\"matTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-tree-node',\n      exportAs: 'matTreeNode',\n      providers: [{\n        provide: CdkTreeNode,\n        useExisting: MatTreeNode\n      }],\n      host: {\n        'class': 'mat-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input,\n      args: [{\n        transform: value => value == null ? 0 : numberAttribute(value)\n      }]\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodeDef_BaseFactory;\n      return function MatTreeNodeDef_Factory(t) {\n        return (ɵMatTreeNodeDef_BaseFactory || (ɵMatTreeNodeDef_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeDef)))(t || MatTreeNodeDef);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeDef,\n      selectors: [[\"\", \"matTreeNodeDef\", \"\"]],\n      inputs: {\n        when: [i0.ɵɵInputFlags.None, \"matTreeNodeDefWhen\", \"when\"],\n        data: [i0.ɵɵInputFlags.None, \"matTreeNode\", \"data\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeDef, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeDef]',\n      inputs: [{\n        name: 'when',\n        alias: 'matTreeNodeDefWhen'\n      }],\n      providers: [{\n        provide: CdkTreeNodeDef,\n        useExisting: MatTreeNodeDef\n      }],\n      standalone: true\n    }]\n  }], null, {\n    data: [{\n      type: Input,\n      args: ['matTreeNode']\n    }]\n  });\n})();\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n  /** Tabindex for the node. */\n  get tabIndex() {\n    return this.disabled ? -1 : this._tabIndex;\n  }\n  set tabIndex(value) {\n    // If the specified tabIndex value is null or undefined, fall back to the default value.\n    this._tabIndex = value != null ? value : 0;\n  }\n  constructor(elementRef, tree, differs, tabIndex) {\n    super(elementRef, tree, differs);\n    /** Whether the node is disabled. */\n    this.disabled = false;\n    this.tabIndex = Number(tabIndex) || 0;\n  }\n  // This is a workaround for https://github.com/angular/angular/issues/19145\n  // In aot mode, the lifecycle hooks from parent class are not called.\n  // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n  ngOnInit() {\n    super.ngOnInit();\n  }\n  ngAfterContentInit() {\n    super.ngAfterContentInit();\n  }\n  ngOnDestroy() {\n    super.ngOnDestroy();\n  }\n  static {\n    this.ɵfac = function MatNestedTreeNode_Factory(t) {\n      return new (t || MatNestedTreeNode)(i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i1.CdkTree), i0.ɵɵdirectiveInject(i0.IterableDiffers), i0.ɵɵinjectAttribute('tabindex'));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatNestedTreeNode,\n      selectors: [[\"mat-nested-tree-node\"]],\n      hostAttrs: [1, \"mat-nested-tree-node\"],\n      inputs: {\n        node: [i0.ɵɵInputFlags.None, \"matNestedTreeNode\", \"node\"],\n        disabled: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"disabled\", \"disabled\", booleanAttribute],\n        tabIndex: \"tabIndex\"\n      },\n      exportAs: [\"matNestedTreeNode\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatNestedTreeNode, [{\n    type: Directive,\n    args: [{\n      selector: 'mat-nested-tree-node',\n      exportAs: 'matNestedTreeNode',\n      providers: [{\n        provide: CdkNestedTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CdkTreeNode,\n        useExisting: MatNestedTreeNode\n      }, {\n        provide: CDK_TREE_NODE_OUTLET_NODE,\n        useExisting: MatNestedTreeNode\n      }],\n      host: {\n        'class': 'mat-nested-tree-node'\n      },\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ElementRef\n  }, {\n    type: i1.CdkTree\n  }, {\n    type: i0.IterableDiffers\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Attribute,\n      args: ['tabindex']\n    }]\n  }], {\n    node: [{\n      type: Input,\n      args: ['matNestedTreeNode']\n    }],\n    disabled: [{\n      type: Input,\n      args: [{\n        transform: booleanAttribute\n      }]\n    }],\n    tabIndex: [{\n      type: Input\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n  /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n  get level() {\n    return this._level;\n  }\n  set level(value) {\n    this._setLevelInput(value);\n  }\n  /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n  get indent() {\n    return this._indent;\n  }\n  set indent(indent) {\n    this._setIndentInput(indent);\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodePadding_BaseFactory;\n      return function MatTreeNodePadding_Factory(t) {\n        return (ɵMatTreeNodePadding_BaseFactory || (ɵMatTreeNodePadding_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodePadding)))(t || MatTreeNodePadding);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodePadding,\n      selectors: [[\"\", \"matTreeNodePadding\", \"\"]],\n      inputs: {\n        level: [i0.ɵɵInputFlags.HasDecoratorInputTransform, \"matTreeNodePadding\", \"level\", numberAttribute],\n        indent: [i0.ɵɵInputFlags.None, \"matTreeNodePaddingIndent\", \"indent\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }]), i0.ɵɵInputTransformsFeature, i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodePadding, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodePadding]',\n      providers: [{\n        provide: CdkTreeNodePadding,\n        useExisting: MatTreeNodePadding\n      }],\n      standalone: true\n    }]\n  }], null, {\n    level: [{\n      type: Input,\n      args: [{\n        alias: 'matTreeNodePadding',\n        transform: numberAttribute\n      }]\n    }],\n    indent: [{\n      type: Input,\n      args: ['matTreeNodePaddingIndent']\n    }]\n  });\n})();\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n  constructor(viewContainer, _node) {\n    this.viewContainer = viewContainer;\n    this._node = _node;\n  }\n  static {\n    this.ɵfac = function MatTreeNodeOutlet_Factory(t) {\n      return new (t || MatTreeNodeOutlet)(i0.ɵɵdirectiveInject(i0.ViewContainerRef), i0.ɵɵdirectiveInject(CDK_TREE_NODE_OUTLET_NODE, 8));\n    };\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeOutlet,\n      selectors: [[\"\", \"matTreeNodeOutlet\", \"\"]],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }])]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeOutlet, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeOutlet]',\n      providers: [{\n        provide: CdkTreeNodeOutlet,\n        useExisting: MatTreeNodeOutlet\n      }],\n      standalone: true\n    }]\n  }], () => [{\n    type: i0.ViewContainerRef\n  }, {\n    type: undefined,\n    decorators: [{\n      type: Inject,\n      args: [CDK_TREE_NODE_OUTLET_NODE]\n    }, {\n      type: Optional\n    }]\n  }], null);\n})();\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n  constructor() {\n    super(...arguments);\n    // Outlets within the tree's template where the dataNodes will be inserted.\n    // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n    this._nodeOutlet = undefined;\n  }\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTree_BaseFactory;\n      return function MatTree_Factory(t) {\n        return (ɵMatTree_BaseFactory || (ɵMatTree_BaseFactory = i0.ɵɵgetInheritedFactory(MatTree)))(t || MatTree);\n      };\n    })();\n  }\n  static {\n    this.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n      type: MatTree,\n      selectors: [[\"mat-tree\"]],\n      viewQuery: function MatTree_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(MatTreeNodeOutlet, 7);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx._nodeOutlet = _t.first);\n        }\n      },\n      hostAttrs: [\"role\", \"tree\", 1, \"mat-tree\"],\n      exportAs: [\"matTree\"],\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTree,\n        useExisting: MatTree\n      }]), i0.ɵɵInheritDefinitionFeature, i0.ɵɵStandaloneFeature],\n      decls: 1,\n      vars: 0,\n      consts: [[\"matTreeNodeOutlet\", \"\"]],\n      template: function MatTree_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelementContainer(0, 0);\n        }\n      },\n      dependencies: [MatTreeNodeOutlet],\n      styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"],\n      encapsulation: 2\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTree, [{\n    type: Component,\n    args: [{\n      selector: 'mat-tree',\n      exportAs: 'matTree',\n      template: `<ng-container matTreeNodeOutlet></ng-container>`,\n      host: {\n        'class': 'mat-tree',\n        'role': 'tree'\n      },\n      encapsulation: ViewEncapsulation.None,\n      changeDetection: ChangeDetectionStrategy.Default,\n      providers: [{\n        provide: CdkTree,\n        useExisting: MatTree\n      }],\n      standalone: true,\n      imports: [MatTreeNodeOutlet],\n      styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"]\n    }]\n  }], null, {\n    _nodeOutlet: [{\n      type: ViewChild,\n      args: [MatTreeNodeOutlet, {\n        static: true\n      }]\n    }]\n  });\n})();\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n  static {\n    this.ɵfac = /* @__PURE__ */(() => {\n      let ɵMatTreeNodeToggle_BaseFactory;\n      return function MatTreeNodeToggle_Factory(t) {\n        return (ɵMatTreeNodeToggle_BaseFactory || (ɵMatTreeNodeToggle_BaseFactory = i0.ɵɵgetInheritedFactory(MatTreeNodeToggle)))(t || MatTreeNodeToggle);\n      };\n    })();\n  }\n  static {\n    this.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n      type: MatTreeNodeToggle,\n      selectors: [[\"\", \"matTreeNodeToggle\", \"\"]],\n      inputs: {\n        recursive: [i0.ɵɵInputFlags.None, \"matTreeNodeToggleRecursive\", \"recursive\"]\n      },\n      standalone: true,\n      features: [i0.ɵɵProvidersFeature([{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }]), i0.ɵɵInheritDefinitionFeature]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeNodeToggle, [{\n    type: Directive,\n    args: [{\n      selector: '[matTreeNodeToggle]',\n      providers: [{\n        provide: CdkTreeNodeToggle,\n        useExisting: MatTreeNodeToggle\n      }],\n      inputs: [{\n        name: 'recursive',\n        alias: 'matTreeNodeToggleRecursive'\n      }],\n      standalone: true\n    }]\n  }], null, null);\n})();\nconst MAT_TREE_DIRECTIVES = [MatNestedTreeNode, MatTreeNodeDef, MatTreeNodePadding, MatTreeNodeToggle, MatTree, MatTreeNode, MatTreeNodeOutlet];\nclass MatTreeModule {\n  static {\n    this.ɵfac = function MatTreeModule_Factory(t) {\n      return new (t || MatTreeModule)();\n    };\n  }\n  static {\n    this.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n      type: MatTreeModule\n    });\n  }\n  static {\n    this.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n      imports: [CdkTreeModule, MatCommonModule, MatCommonModule]\n    });\n  }\n}\n(() => {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(MatTreeModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n      exports: [MatCommonModule, MAT_TREE_DIRECTIVES]\n    }]\n  }], null, null);\n})();\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n  constructor(transformFunction, getLevel, isExpandable, getChildren) {\n    this.transformFunction = transformFunction;\n    this.getLevel = getLevel;\n    this.isExpandable = isExpandable;\n    this.getChildren = getChildren;\n  }\n  _flattenNode(node, level, resultNodes, parentMap) {\n    const flatNode = this.transformFunction(node, level);\n    resultNodes.push(flatNode);\n    if (this.isExpandable(flatNode)) {\n      const childrenNodes = this.getChildren(node);\n      if (childrenNodes) {\n        if (Array.isArray(childrenNodes)) {\n          this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n        } else {\n          childrenNodes.pipe(take(1)).subscribe(children => {\n            this._flattenChildren(children, level, resultNodes, parentMap);\n          });\n        }\n      }\n    }\n    return resultNodes;\n  }\n  _flattenChildren(children, level, resultNodes, parentMap) {\n    children.forEach((child, index) => {\n      let childParentMap = parentMap.slice();\n      childParentMap.push(index != children.length - 1);\n      this._flattenNode(child, level + 1, resultNodes, childParentMap);\n    });\n  }\n  /**\n   * Flatten a list of node type T to flattened version of node F.\n   * Please note that type T may be nested, and the length of `structuredData` may be different\n   * from that of returned list `F[]`.\n   */\n  flattenNodes(structuredData) {\n    let resultNodes = [];\n    structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n    return resultNodes;\n  }\n  /**\n   * Expand flattened node with current expansion status.\n   * The returned list may have different length.\n   */\n  expandFlattenedNodes(nodes, treeControl) {\n    let results = [];\n    let currentExpand = [];\n    currentExpand[0] = true;\n    nodes.forEach(node => {\n      let expand = true;\n      for (let i = 0; i <= this.getLevel(node); i++) {\n        expand = expand && currentExpand[i];\n      }\n      if (expand) {\n        results.push(node);\n      }\n      if (this.isExpandable(node)) {\n        currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n      }\n    });\n    return results;\n  }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n    this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n    this._treeControl.dataNodes = this._flattenedData.value;\n  }\n  constructor(_treeControl, _treeFlattener, initialData) {\n    super();\n    this._treeControl = _treeControl;\n    this._treeFlattener = _treeFlattener;\n    this._flattenedData = new BehaviorSubject([]);\n    this._expandedData = new BehaviorSubject([]);\n    this._data = new BehaviorSubject([]);\n    if (initialData) {\n      // Assign the data through the constructor to ensure that all of the logic is executed.\n      this.data = initialData;\n    }\n  }\n  connect(collectionViewer) {\n    return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n      this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n      return this._expandedData.value;\n    }));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n  constructor() {\n    super(...arguments);\n    this._data = new BehaviorSubject([]);\n  }\n  /**\n   * Data for the nested tree\n   */\n  get data() {\n    return this._data.value;\n  }\n  set data(value) {\n    this._data.next(value);\n  }\n  connect(collectionViewer) {\n    return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n  }\n  disconnect() {\n    // no op\n  }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };","map":{"version":3,"names":["i1","CdkTreeNode","CdkTreeNodeDef","CdkNestedTreeNode","CDK_TREE_NODE_OUTLET_NODE","CdkTreeNodePadding","CdkTreeNodeOutlet","CdkTree","CdkTreeNodeToggle","CdkTreeModule","i0","booleanAttribute","numberAttribute","Directive","Attribute","Input","Inject","Optional","Component","ViewEncapsulation","ChangeDetectionStrategy","ViewChild","NgModule","MatCommonModule","DataSource","BehaviorSubject","merge","take","map","MatTreeNode","constructor","elementRef","tree","tabIndex","disabled","Number","ngOnInit","ngOnDestroy","ɵfac","MatTreeNode_Factory","t","ɵɵdirectiveInject","ElementRef","ɵɵinjectAttribute","ɵdir","ɵɵdefineDirective","type","selectors","hostAttrs","inputs","ɵɵInputFlags","HasDecoratorInputTransform","value","exportAs","standalone","features","ɵɵProvidersFeature","provide","useExisting","ɵɵInputTransformsFeature","ɵɵInheritDefinitionFeature","ngDevMode","ɵsetClassMetadata","args","selector","providers","host","undefined","decorators","transform","MatTreeNodeDef","ɵMatTreeNodeDef_BaseFactory","MatTreeNodeDef_Factory","ɵɵgetInheritedFactory","when","None","data","name","alias","MatNestedTreeNode","_tabIndex","differs","ngAfterContentInit","MatNestedTreeNode_Factory","IterableDiffers","node","MatTreeNodePadding","level","_level","_setLevelInput","indent","_indent","_setIndentInput","ɵMatTreeNodePadding_BaseFactory","MatTreeNodePadding_Factory","MatTreeNodeOutlet","viewContainer","_node","MatTreeNodeOutlet_Factory","ViewContainerRef","MatTree","arguments","_nodeOutlet","ɵMatTree_BaseFactory","MatTree_Factory","ɵcmp","ɵɵdefineComponent","viewQuery","MatTree_Query","rf","ctx","ɵɵviewQuery","_t","ɵɵqueryRefresh","ɵɵloadQuery","first","ɵɵStandaloneFeature","decls","vars","consts","template","MatTree_Template","ɵɵelementContainer","dependencies","styles","encapsulation","changeDetection","Default","imports","static","MatTreeNodeToggle","ɵMatTreeNodeToggle_BaseFactory","MatTreeNodeToggle_Factory","recursive","MAT_TREE_DIRECTIVES","MatTreeModule","MatTreeModule_Factory","ɵmod","ɵɵdefineNgModule","ɵinj","ɵɵdefineInjector","exports","MatTreeFlattener","transformFunction","getLevel","isExpandable","getChildren","_flattenNode","resultNodes","parentMap","flatNode","push","childrenNodes","Array","isArray","_flattenChildren","pipe","subscribe","children","forEach","child","index","childParentMap","slice","length","flattenNodes","structuredData","expandFlattenedNodes","nodes","treeControl","results","currentExpand","expand","i","isExpanded","MatTreeFlatDataSource","_data","next","_flattenedData","_treeFlattener","_treeControl","dataNodes","initialData","_expandedData","connect","collectionViewer","viewChange","expansionModel","changed","disconnect","MatTreeNestedDataSource"],"sources":["/home/layth/Desktop/front/front/node_modules/@angular/material/fesm2022/tree.mjs"],"sourcesContent":["import * as i1 from '@angular/cdk/tree';\nimport { CdkTreeNode, CdkTreeNodeDef, CdkNestedTreeNode, CDK_TREE_NODE_OUTLET_NODE, CdkTreeNodePadding, CdkTreeNodeOutlet, CdkTree, CdkTreeNodeToggle, CdkTreeModule } from '@angular/cdk/tree';\nimport * as i0 from '@angular/core';\nimport { booleanAttribute, numberAttribute, Directive, Attribute, Input, Inject, Optional, Component, ViewEncapsulation, ChangeDetectionStrategy, ViewChild, NgModule } from '@angular/core';\nimport { MatCommonModule } from '@angular/material/core';\nimport { DataSource } from '@angular/cdk/collections';\nimport { BehaviorSubject, merge } from 'rxjs';\nimport { take, map } from 'rxjs/operators';\n\n/**\n * Wrapper for the CdkTree node with Material design styles.\n */\nclass MatTreeNode extends CdkTreeNode {\n    constructor(elementRef, tree, tabIndex) {\n        super(elementRef, tree);\n        /** Whether the node is disabled. */\n        this.disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/23091\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatTreeNode, isStandalone: true, selector: \"mat-tree-node\", inputs: { disabled: [\"disabled\", \"disabled\", booleanAttribute], tabIndex: [\"tabIndex\", \"tabIndex\", (value) => (value == null ? 0 : numberAttribute(value))] }, host: { classAttribute: \"mat-tree-node\" }, providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }], exportAs: [\"matTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-tree-node',\n                    exportAs: 'matTreeNode',\n                    providers: [{ provide: CdkTreeNode, useExisting: MatTreeNode }],\n                    host: {\n                        'class': 'mat-tree-node',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input,\n                args: [{\n                        transform: (value) => (value == null ? 0 : numberAttribute(value)),\n                    }]\n            }] } });\n/**\n * Wrapper for the CdkTree node definition with Material design styles.\n * Captures the node's template and a when predicate that describes when this node should be used.\n */\nclass MatTreeNodeDef extends CdkTreeNodeDef {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeDef, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTreeNodeDef, isStandalone: true, selector: \"[matTreeNodeDef]\", inputs: { when: [\"matTreeNodeDefWhen\", \"when\"], data: [\"matTreeNode\", \"data\"] }, providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeDef, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeDef]',\n                    inputs: [{ name: 'when', alias: 'matTreeNodeDefWhen' }],\n                    providers: [{ provide: CdkTreeNodeDef, useExisting: MatTreeNodeDef }],\n                    standalone: true,\n                }]\n        }], propDecorators: { data: [{\n                type: Input,\n                args: ['matTreeNode']\n            }] } });\n/**\n * Wrapper for the CdkTree nested node with Material design styles.\n */\nclass MatNestedTreeNode extends CdkNestedTreeNode {\n    /** Tabindex for the node. */\n    get tabIndex() {\n        return this.disabled ? -1 : this._tabIndex;\n    }\n    set tabIndex(value) {\n        // If the specified tabIndex value is null or undefined, fall back to the default value.\n        this._tabIndex = value != null ? value : 0;\n    }\n    constructor(elementRef, tree, differs, tabIndex) {\n        super(elementRef, tree, differs);\n        /** Whether the node is disabled. */\n        this.disabled = false;\n        this.tabIndex = Number(tabIndex) || 0;\n    }\n    // This is a workaround for https://github.com/angular/angular/issues/19145\n    // In aot mode, the lifecycle hooks from parent class are not called.\n    // TODO(tinayuangao): Remove when the angular issue #19145 is fixed\n    ngOnInit() {\n        super.ngOnInit();\n    }\n    ngAfterContentInit() {\n        super.ngAfterContentInit();\n    }\n    ngOnDestroy() {\n        super.ngOnDestroy();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNestedTreeNode, deps: [{ token: i0.ElementRef }, { token: i1.CdkTree }, { token: i0.IterableDiffers }, { token: 'tabindex', attribute: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatNestedTreeNode, isStandalone: true, selector: \"mat-nested-tree-node\", inputs: { node: [\"matNestedTreeNode\", \"node\"], disabled: [\"disabled\", \"disabled\", booleanAttribute], tabIndex: \"tabIndex\" }, host: { classAttribute: \"mat-nested-tree-node\" }, providers: [\n            { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n            { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n        ], exportAs: [\"matNestedTreeNode\"], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatNestedTreeNode, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'mat-nested-tree-node',\n                    exportAs: 'matNestedTreeNode',\n                    providers: [\n                        { provide: CdkNestedTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CdkTreeNode, useExisting: MatNestedTreeNode },\n                        { provide: CDK_TREE_NODE_OUTLET_NODE, useExisting: MatNestedTreeNode },\n                    ],\n                    host: {\n                        'class': 'mat-nested-tree-node',\n                    },\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ElementRef }, { type: i1.CdkTree }, { type: i0.IterableDiffers }, { type: undefined, decorators: [{\n                    type: Attribute,\n                    args: ['tabindex']\n                }] }], propDecorators: { node: [{\n                type: Input,\n                args: ['matNestedTreeNode']\n            }], disabled: [{\n                type: Input,\n                args: [{ transform: booleanAttribute }]\n            }], tabIndex: [{\n                type: Input\n            }] } });\n\n/**\n * Wrapper for the CdkTree padding with Material design styles.\n */\nclass MatTreeNodePadding extends CdkTreeNodePadding {\n    /** The level of depth of the tree node. The padding will be `level * indent` pixels. */\n    get level() {\n        return this._level;\n    }\n    set level(value) {\n        this._setLevelInput(value);\n    }\n    /** The indent for each level. Default number 40px from material design menu sub-menu spec. */\n    get indent() {\n        return this._indent;\n    }\n    set indent(indent) {\n        this._setIndentInput(indent);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodePadding, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"16.1.0\", version: \"17.2.0\", type: MatTreeNodePadding, isStandalone: true, selector: \"[matTreeNodePadding]\", inputs: { level: [\"matTreeNodePadding\", \"level\", numberAttribute], indent: [\"matTreeNodePaddingIndent\", \"indent\"] }, providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodePadding, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodePadding]',\n                    providers: [{ provide: CdkTreeNodePadding, useExisting: MatTreeNodePadding }],\n                    standalone: true,\n                }]\n        }], propDecorators: { level: [{\n                type: Input,\n                args: [{ alias: 'matTreeNodePadding', transform: numberAttribute }]\n            }], indent: [{\n                type: Input,\n                args: ['matTreeNodePaddingIndent']\n            }] } });\n\n/**\n * Outlet for nested CdkNode. Put `[matTreeNodeOutlet]` on a tag to place children dataNodes\n * inside the outlet.\n */\nclass MatTreeNodeOutlet {\n    constructor(viewContainer, _node) {\n        this.viewContainer = viewContainer;\n        this._node = _node;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeOutlet, deps: [{ token: i0.ViewContainerRef }, { token: CDK_TREE_NODE_OUTLET_NODE, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTreeNodeOutlet, isStandalone: true, selector: \"[matTreeNodeOutlet]\", providers: [\n            {\n                provide: CdkTreeNodeOutlet,\n                useExisting: MatTreeNodeOutlet,\n            },\n        ], ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeOutlet, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeOutlet]',\n                    providers: [\n                        {\n                            provide: CdkTreeNodeOutlet,\n                            useExisting: MatTreeNodeOutlet,\n                        },\n                    ],\n                    standalone: true,\n                }]\n        }], ctorParameters: () => [{ type: i0.ViewContainerRef }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [CDK_TREE_NODE_OUTLET_NODE]\n                }, {\n                    type: Optional\n                }] }] });\n\n/**\n * Wrapper for the CdkTable with Material design styles.\n */\nclass MatTree extends CdkTree {\n    constructor() {\n        super(...arguments);\n        // Outlets within the tree's template where the dataNodes will be inserted.\n        // We need an initializer here to avoid a TS error. The value will be set in `ngAfterViewInit`.\n        this._nodeOutlet = undefined;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTree, deps: null, target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTree, isStandalone: true, selector: \"mat-tree\", host: { attributes: { \"role\": \"tree\" }, classAttribute: \"mat-tree\" }, providers: [{ provide: CdkTree, useExisting: MatTree }], viewQueries: [{ propertyName: \"_nodeOutlet\", first: true, predicate: MatTreeNodeOutlet, descendants: true, static: true }], exportAs: [\"matTree\"], usesInheritance: true, ngImport: i0, template: `<ng-container matTreeNodeOutlet></ng-container>`, isInline: true, styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"], dependencies: [{ kind: \"directive\", type: MatTreeNodeOutlet, selector: \"[matTreeNodeOutlet]\" }], changeDetection: i0.ChangeDetectionStrategy.Default, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTree, decorators: [{\n            type: Component,\n            args: [{ selector: 'mat-tree', exportAs: 'matTree', template: `<ng-container matTreeNodeOutlet></ng-container>`, host: {\n                        'class': 'mat-tree',\n                        'role': 'tree',\n                    }, encapsulation: ViewEncapsulation.None, changeDetection: ChangeDetectionStrategy.Default, providers: [{ provide: CdkTree, useExisting: MatTree }], standalone: true, imports: [MatTreeNodeOutlet], styles: [\".mat-tree{display:block;background-color:var(--mat-tree-container-background-color)}.mat-tree-node,.mat-nested-tree-node{color:var(--mat-tree-node-text-color);font-family:var(--mat-tree-node-text-font);font-size:var(--mat-tree-node-text-size);font-weight:var(--mat-tree-node-text-weight)}.mat-tree-node{display:flex;align-items:center;flex:1;word-wrap:break-word;min-height:var(--mat-tree-node-min-height)}.mat-nested-tree-node{border-bottom-width:0}\"] }]\n        }], propDecorators: { _nodeOutlet: [{\n                type: ViewChild,\n                args: [MatTreeNodeOutlet, { static: true }]\n            }] } });\n\n/**\n * Wrapper for the CdkTree's toggle with Material design styles.\n */\nclass MatTreeNodeToggle extends CdkTreeNodeToggle {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeToggle, deps: null, target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"17.2.0\", type: MatTreeNodeToggle, isStandalone: true, selector: \"[matTreeNodeToggle]\", inputs: { recursive: [\"matTreeNodeToggleRecursive\", \"recursive\"] }, providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }], usesInheritance: true, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeNodeToggle, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[matTreeNodeToggle]',\n                    providers: [{ provide: CdkTreeNodeToggle, useExisting: MatTreeNodeToggle }],\n                    inputs: [{ name: 'recursive', alias: 'matTreeNodeToggleRecursive' }],\n                    standalone: true,\n                }]\n        }] });\n\nconst MAT_TREE_DIRECTIVES = [\n    MatNestedTreeNode,\n    MatTreeNodeDef,\n    MatTreeNodePadding,\n    MatTreeNodeToggle,\n    MatTree,\n    MatTreeNode,\n    MatTreeNodeOutlet,\n];\nclass MatTreeModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet], exports: [MatCommonModule, MatNestedTreeNode,\n            MatTreeNodeDef,\n            MatTreeNodePadding,\n            MatTreeNodeToggle,\n            MatTree,\n            MatTreeNode,\n            MatTreeNodeOutlet] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeModule, imports: [CdkTreeModule, MatCommonModule, MatCommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"17.2.0\", ngImport: i0, type: MatTreeModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CdkTreeModule, MatCommonModule, ...MAT_TREE_DIRECTIVES],\n                    exports: [MatCommonModule, MAT_TREE_DIRECTIVES],\n                }]\n        }] });\n\n/**\n * Tree flattener to convert a normal type of node to node with children & level information.\n * Transform nested nodes of type `T` to flattened nodes of type `F`.\n *\n * For example, the input data of type `T` is nested, and contains its children data:\n *   SomeNode: {\n *     key: 'Fruits',\n *     children: [\n *       NodeOne: {\n *         key: 'Apple',\n *       },\n *       NodeTwo: {\n *        key: 'Pear',\n *      }\n *    ]\n *  }\n *  After flattener flatten the tree, the structure will become\n *  SomeNode: {\n *    key: 'Fruits',\n *    expandable: true,\n *    level: 1\n *  },\n *  NodeOne: {\n *    key: 'Apple',\n *    expandable: false,\n *    level: 2\n *  },\n *  NodeTwo: {\n *   key: 'Pear',\n *   expandable: false,\n *   level: 2\n * }\n * and the output flattened type is `F` with additional information.\n */\nclass MatTreeFlattener {\n    constructor(transformFunction, getLevel, isExpandable, getChildren) {\n        this.transformFunction = transformFunction;\n        this.getLevel = getLevel;\n        this.isExpandable = isExpandable;\n        this.getChildren = getChildren;\n    }\n    _flattenNode(node, level, resultNodes, parentMap) {\n        const flatNode = this.transformFunction(node, level);\n        resultNodes.push(flatNode);\n        if (this.isExpandable(flatNode)) {\n            const childrenNodes = this.getChildren(node);\n            if (childrenNodes) {\n                if (Array.isArray(childrenNodes)) {\n                    this._flattenChildren(childrenNodes, level, resultNodes, parentMap);\n                }\n                else {\n                    childrenNodes.pipe(take(1)).subscribe(children => {\n                        this._flattenChildren(children, level, resultNodes, parentMap);\n                    });\n                }\n            }\n        }\n        return resultNodes;\n    }\n    _flattenChildren(children, level, resultNodes, parentMap) {\n        children.forEach((child, index) => {\n            let childParentMap = parentMap.slice();\n            childParentMap.push(index != children.length - 1);\n            this._flattenNode(child, level + 1, resultNodes, childParentMap);\n        });\n    }\n    /**\n     * Flatten a list of node type T to flattened version of node F.\n     * Please note that type T may be nested, and the length of `structuredData` may be different\n     * from that of returned list `F[]`.\n     */\n    flattenNodes(structuredData) {\n        let resultNodes = [];\n        structuredData.forEach(node => this._flattenNode(node, 0, resultNodes, []));\n        return resultNodes;\n    }\n    /**\n     * Expand flattened node with current expansion status.\n     * The returned list may have different length.\n     */\n    expandFlattenedNodes(nodes, treeControl) {\n        let results = [];\n        let currentExpand = [];\n        currentExpand[0] = true;\n        nodes.forEach(node => {\n            let expand = true;\n            for (let i = 0; i <= this.getLevel(node); i++) {\n                expand = expand && currentExpand[i];\n            }\n            if (expand) {\n                results.push(node);\n            }\n            if (this.isExpandable(node)) {\n                currentExpand[this.getLevel(node) + 1] = treeControl.isExpanded(node);\n            }\n        });\n        return results;\n    }\n}\n/**\n * Data source for flat tree.\n * The data source need to handle expansion/collapsion of the tree node and change the data feed\n * to `MatTree`.\n * The nested tree nodes of type `T` are flattened through `MatTreeFlattener`, and converted\n * to type `F` for `MatTree` to consume.\n */\nclass MatTreeFlatDataSource extends DataSource {\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n        this._flattenedData.next(this._treeFlattener.flattenNodes(this.data));\n        this._treeControl.dataNodes = this._flattenedData.value;\n    }\n    constructor(_treeControl, _treeFlattener, initialData) {\n        super();\n        this._treeControl = _treeControl;\n        this._treeFlattener = _treeFlattener;\n        this._flattenedData = new BehaviorSubject([]);\n        this._expandedData = new BehaviorSubject([]);\n        this._data = new BehaviorSubject([]);\n        if (initialData) {\n            // Assign the data through the constructor to ensure that all of the logic is executed.\n            this.data = initialData;\n        }\n    }\n    connect(collectionViewer) {\n        return merge(collectionViewer.viewChange, this._treeControl.expansionModel.changed, this._flattenedData).pipe(map(() => {\n            this._expandedData.next(this._treeFlattener.expandFlattenedNodes(this._flattenedData.value, this._treeControl));\n            return this._expandedData.value;\n        }));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Data source for nested tree.\n *\n * The data source for nested tree doesn't have to consider node flattener, or the way to expand\n * or collapse. The expansion/collapsion will be handled by TreeControl and each non-leaf node.\n */\nclass MatTreeNestedDataSource extends DataSource {\n    constructor() {\n        super(...arguments);\n        this._data = new BehaviorSubject([]);\n    }\n    /**\n     * Data for the nested tree\n     */\n    get data() {\n        return this._data.value;\n    }\n    set data(value) {\n        this._data.next(value);\n    }\n    connect(collectionViewer) {\n        return merge(...[collectionViewer.viewChange, this._data]).pipe(map(() => this.data));\n    }\n    disconnect() {\n        // no op\n    }\n}\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { MatNestedTreeNode, MatTree, MatTreeFlatDataSource, MatTreeFlattener, MatTreeModule, MatTreeNestedDataSource, MatTreeNode, MatTreeNodeDef, MatTreeNodeOutlet, MatTreeNodePadding, MatTreeNodeToggle };\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}