{"ast":null,"code":"import { Breakpoints } from '@angular/cdk/layout';\nimport { map, shareReplay } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/router\";\nexport class AppComponent {\n  // Constructor to inject BreakpointObserver service\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    this.title = 'AVAX RESTAURANT';\n    // Observable for checking if the current device is a handset (mobile)\n    this.isHandset$ = this.breakpointObserver.observe(Breakpoints.Handset).pipe(map(result => result.matches), shareReplay() // Ensures efficient subscription\n    );\n  }\n  // ngOnInit is where we implement custom breakpoints logic\n  ngOnInit() {\n    const CUSTOM_BREAKPOINTS = {\n      smallScreen: '(max-width: 600px)',\n      mediumScreen: '(min-width: 601px) and (max-width: 1024px)',\n      largeScreen: '(min-width: 1025px)'\n    };\n    this.breakpointObserver.observe([CUSTOM_BREAKPOINTS.smallScreen, CUSTOM_BREAKPOINTS.mediumScreen, CUSTOM_BREAKPOINTS.largeScreen]).subscribe(result => {\n      if (result.breakpoints[CUSTOM_BREAKPOINTS.smallScreen]) {\n        console.log('Small screen detected');\n        // Apply logic for small screens (e.g., mobile)\n      } else if (result.breakpoints[CUSTOM_BREAKPOINTS.mediumScreen]) {\n        console.log('Medium screen detected');\n        // Apply logic for medium screens (e.g., tablet)\n      } else if (result.breakpoints[CUSTOM_BREAKPOINTS.largeScreen]) {\n        console.log('Large screen detected');\n        // Apply logic for large screens (e.g., desktop)\n      }\n    });\n  }\n  static {\n    this.ɵfac = function AppComponent_Factory(t) {\n      return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: AppComponent,\n      selectors: [[\"app-root\"]],\n      decls: 1,\n      vars: 0,\n      template: function AppComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵelement(0, \"router-outlet\");\n        }\n      },\n      dependencies: [i2.RouterOutlet],\n      styles: [\"\\n\\n.mobile-header[_ngcontent-%COMP%] {\\n  background-color: #28a745;\\n  padding: 1rem;\\n  color: white;\\n}\\n\\n.mobile-content[_ngcontent-%COMP%] {\\n  padding: 1.5rem;\\n}\\n\\n\\n\\n.desktop-header[_ngcontent-%COMP%] {\\n  background-color: #007bff;\\n  padding: 1.5rem;\\n  color: white;\\n}\\n\\n.desktop-content[_ngcontent-%COMP%] {\\n  padding: 2rem;\\n  font-size: 1.2rem;\\n}\\n\\n\\n\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUFBO0FBQ0E7RUFDSSx5QkFBQTtFQUNBLGFBQUE7RUFDQSxZQUFBO0FBQ0o7O0FBRUU7RUFDRSxlQUFBO0FBQ0o7O0FBRUUsNEJBQUE7QUFDQTtFQUNFLHlCQUFBO0VBQ0EsZUFBQTtFQUNBLFlBQUE7QUFDSjs7QUFFRTtFQUNFLGFBQUE7RUFDQSxpQkFBQTtBQUNKOztBQUVFLHVGQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLyogTW9iaWxlLXNwZWNpZmljIHN0eWxlcyAqL1xuLm1vYmlsZS1oZWFkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMyOGE3NDU7XG4gICAgcGFkZGluZzogMXJlbTtcbiAgICBjb2xvcjogd2hpdGU7XG4gIH1cbiAgXG4gIC5tb2JpbGUtY29udGVudCB7XG4gICAgcGFkZGluZzogMS41cmVtO1xuICB9XG4gIFxuICAvKiBEZXNrdG9wLXNwZWNpZmljIHN0eWxlcyAqL1xuICAuZGVza3RvcC1oZWFkZXIge1xuICAgIGJhY2tncm91bmQtY29sb3I6ICMwMDdiZmY7XG4gICAgcGFkZGluZzogMS41cmVtO1xuICAgIGNvbG9yOiB3aGl0ZTtcbiAgfVxuICBcbiAgLmRlc2t0b3AtY29udGVudCB7XG4gICAgcGFkZGluZzogMnJlbTtcbiAgICBmb250LXNpemU6IDEuMnJlbTtcbiAgfVxuICBcbiAgLyogRnVydGhlciBjdXN0b21pemF0aW9ucyBmb3IgbW9iaWxlIGFuZCBkZXNrdG9wIHZpZXdzIGNhbiBiZSBtYWRlIHdpdGggbWVkaWEgcXVlcmllcyAqL1xuICAiXSwic291cmNlUm9vdCI6IiJ9 */\"]\n    });\n  }\n}","map":{"version":3,"names":["Breakpoints","map","shareReplay","AppComponent","constructor","breakpointObserver","title","isHandset$","observe","Handset","pipe","result","matches","ngOnInit","CUSTOM_BREAKPOINTS","smallScreen","mediumScreen","largeScreen","subscribe","breakpoints","console","log","i0","ɵɵdirectiveInject","i1","BreakpointObserver","selectors","decls","vars","template","AppComponent_Template","rf","ctx","ɵɵelement"],"sources":["/home/layth/Desktop/front/front/src/app/app.component.ts","/home/layth/Desktop/front/front/src/app/app.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { BreakpointObserver, Breakpoints } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map, shareReplay } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  title = 'AVAX RESTAURANT';\n\n  // Observable for checking if the current device is a handset (mobile)\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches),\n      shareReplay() // Ensures efficient subscription\n    );\n\n  // Constructor to inject BreakpointObserver service\n  constructor(private breakpointObserver: BreakpointObserver) {}\n\n  // ngOnInit is where we implement custom breakpoints logic\n  ngOnInit(): void {\n    const CUSTOM_BREAKPOINTS = {\n      smallScreen: '(max-width: 600px)',\n      mediumScreen: '(min-width: 601px) and (max-width: 1024px)',\n      largeScreen: '(min-width: 1025px)'\n    };\n\n    this.breakpointObserver.observe([\n      CUSTOM_BREAKPOINTS.smallScreen,\n      CUSTOM_BREAKPOINTS.mediumScreen,\n      CUSTOM_BREAKPOINTS.largeScreen\n    ]).subscribe(result => {\n      if (result.breakpoints[CUSTOM_BREAKPOINTS.smallScreen]) {\n        console.log('Small screen detected');\n        // Apply logic for small screens (e.g., mobile)\n      } else if (result.breakpoints[CUSTOM_BREAKPOINTS.mediumScreen]) {\n        console.log('Medium screen detected');\n        // Apply logic for medium screens (e.g., tablet)\n      } else if (result.breakpoints[CUSTOM_BREAKPOINTS.largeScreen]) {\n        console.log('Large screen detected');\n        // Apply logic for large screens (e.g., desktop)\n      }\n    });\n  }\n}\n","<router-outlet></router-outlet>\n"],"mappings":"AACA,SAA6BA,WAAW,QAAQ,qBAAqB;AAErE,SAASC,GAAG,EAAEC,WAAW,QAAQ,gBAAgB;;;;AAOjD,OAAM,MAAOC,YAAY;EAUvB;EACAC,YAAoBC,kBAAsC;IAAtC,KAAAA,kBAAkB,GAAlBA,kBAAkB;IAVtC,KAAAC,KAAK,GAAG,iBAAiB;IAEzB;IACA,KAAAC,UAAU,GAAwB,IAAI,CAACF,kBAAkB,CAACG,OAAO,CAACR,WAAW,CAACS,OAAO,CAAC,CACnFC,IAAI,CACHT,GAAG,CAACU,MAAM,IAAIA,MAAM,CAACC,OAAO,CAAC,EAC7BV,WAAW,EAAE,CAAC;KACf;EAG0D;EAE7D;EACAW,QAAQA,CAAA;IACN,MAAMC,kBAAkB,GAAG;MACzBC,WAAW,EAAE,oBAAoB;MACjCC,YAAY,EAAE,4CAA4C;MAC1DC,WAAW,EAAE;KACd;IAED,IAAI,CAACZ,kBAAkB,CAACG,OAAO,CAAC,CAC9BM,kBAAkB,CAACC,WAAW,EAC9BD,kBAAkB,CAACE,YAAY,EAC/BF,kBAAkB,CAACG,WAAW,CAC/B,CAAC,CAACC,SAAS,CAACP,MAAM,IAAG;MACpB,IAAIA,MAAM,CAACQ,WAAW,CAACL,kBAAkB,CAACC,WAAW,CAAC,EAAE;QACtDK,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpC;MACF,CAAC,MAAM,IAAIV,MAAM,CAACQ,WAAW,CAACL,kBAAkB,CAACE,YAAY,CAAC,EAAE;QAC9DI,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;QACrC;MACF,CAAC,MAAM,IAAIV,MAAM,CAACQ,WAAW,CAACL,kBAAkB,CAACG,WAAW,CAAC,EAAE;QAC7DG,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;QACpC;MACF;IACF,CAAC,CAAC;EACJ;;;uBArCWlB,YAAY,EAAAmB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,kBAAA;IAAA;EAAA;;;YAAZtB,YAAY;MAAAuB,SAAA;MAAAC,KAAA;MAAAC,IAAA;MAAAC,QAAA,WAAAC,sBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;UCVzBT,EAAA,CAAAW,SAAA,oBAA+B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}