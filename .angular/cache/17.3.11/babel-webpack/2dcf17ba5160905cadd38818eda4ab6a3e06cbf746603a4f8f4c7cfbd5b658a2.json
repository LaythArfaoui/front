{"ast":null,"code":"import { Subscription } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/cdk/layout\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/cdk/bidi\";\nimport * as i4 from \"@angular/material/sidenav\";\nimport * as i5 from \"./sidebar/sidebar.component\";\nimport * as i6 from \"./header/header.component\";\nconst _c0 = [\"leftsidenav\"];\nconst MOBILE_VIEW = 'screen and (max-width: 768px)';\nconst TABLET_VIEW = 'screen and (min-width: 769px) and (max-width: 1024px)';\nconst MONITOR_VIEW = 'screen and (min-width: 1024px)';\nexport class FullComponent {\n  get isOver() {\n    return this.isMobileScreen;\n  }\n  constructor(breakpointObserver) {\n    this.breakpointObserver = breakpointObserver;\n    //get options from service\n    this.layoutChangesSubscription = Subscription.EMPTY;\n    this.isMobileScreen = false;\n    this.isContentWidthFixed = true;\n    this.isCollapsedWidthFixed = false;\n    this.htmlElement = document.querySelector('html');\n    this.layoutChangesSubscription = this.breakpointObserver.observe([MOBILE_VIEW, TABLET_VIEW, MONITOR_VIEW]).subscribe(state => {\n      // SidenavOpened must be reset true when layout changes\n      this.isMobileScreen = state.breakpoints[MOBILE_VIEW];\n      this.isContentWidthFixed = state.breakpoints[MONITOR_VIEW];\n    });\n  }\n  ngOnInit() {}\n  ngOnDestroy() {\n    this.layoutChangesSubscription.unsubscribe();\n  }\n  toggleCollapsed() {\n    this.isContentWidthFixed = false;\n  }\n  onSidenavClosedStart() {\n    this.isContentWidthFixed = false;\n  }\n  onSidenavOpenedChange(isOpened) {\n    this.isCollapsedWidthFixed = !this.isOver;\n  }\n  static {\n    this.ɵfac = function FullComponent_Factory(t) {\n      return new (t || FullComponent)(i0.ɵɵdirectiveInject(i1.BreakpointObserver));\n    };\n  }\n  static {\n    this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n      type: FullComponent,\n      selectors: [[\"app-full\"]],\n      viewQuery: function FullComponent_Query(rf, ctx) {\n        if (rf & 1) {\n          i0.ɵɵviewQuery(_c0, 5);\n        }\n        if (rf & 2) {\n          let _t;\n          i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.sidenav = _t.first);\n        }\n      },\n      decls: 11,\n      vars: 2,\n      consts: [[\"leftsidenav\", \"\"], [\"autosize\", \"\", \"autoFocus\", \"\", \"dir\", \"ltr\", 1, \"mainWrapper\", \"blue_theme\", \"light-theme\"], [1, \"sidebarNav\", 3, \"openedChange\", \"closedStart\", \"mode\", \"opened\"], [1, \"contentWrapper\"], [1, \"pageWrapper\"]],\n      template: function FullComponent_Template(rf, ctx) {\n        if (rf & 1) {\n          const _r1 = i0.ɵɵgetCurrentView();\n          i0.ɵɵelementStart(0, \"mat-sidenav-container\", 1)(1, \"mat-sidenav\", 2, 0);\n          i0.ɵɵlistener(\"openedChange\", function FullComponent_Template_mat_sidenav_openedChange_1_listener($event) {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onSidenavOpenedChange($event));\n          })(\"closedStart\", function FullComponent_Template_mat_sidenav_closedStart_1_listener() {\n            i0.ɵɵrestoreView(_r1);\n            return i0.ɵɵresetView(ctx.onSidenavClosedStart());\n          });\n          i0.ɵɵelement(3, \"app-sidebar\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(4, \"mat-sidenav-content\", 3)(5, \"app-header\")(6, \"p\");\n          i0.ɵɵtext(7, \"hello\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵtext(8, \" >\");\n          i0.ɵɵelementEnd();\n          i0.ɵɵelementStart(9, \"main\", 4);\n          i0.ɵɵelement(10, \"router-outlet\");\n          i0.ɵɵelementEnd()()();\n        }\n        if (rf & 2) {\n          i0.ɵɵadvance();\n          i0.ɵɵproperty(\"mode\", ctx.isOver ? \"over\" : \"side\")(\"opened\", !ctx.isOver);\n        }\n      },\n      dependencies: [i2.RouterOutlet, i3.Dir, i4.MatSidenav, i4.MatSidenavContainer, i4.MatSidenavContent, i5.SidebarComponent, i6.HeaderComponent],\n      encapsulation: 2\n    });\n  }\n}","map":{"version":3,"names":["Subscription","MOBILE_VIEW","TABLET_VIEW","MONITOR_VIEW","FullComponent","isOver","isMobileScreen","constructor","breakpointObserver","layoutChangesSubscription","EMPTY","isContentWidthFixed","isCollapsedWidthFixed","htmlElement","document","querySelector","observe","subscribe","state","breakpoints","ngOnInit","ngOnDestroy","unsubscribe","toggleCollapsed","onSidenavClosedStart","onSidenavOpenedChange","isOpened","i0","ɵɵdirectiveInject","i1","BreakpointObserver","selectors","viewQuery","FullComponent_Query","rf","ctx","ɵɵelementStart","ɵɵlistener","FullComponent_Template_mat_sidenav_openedChange_1_listener","$event","ɵɵrestoreView","_r1","ɵɵresetView","FullComponent_Template_mat_sidenav_closedStart_1_listener","ɵɵelement","ɵɵelementEnd","ɵɵtext","ɵɵadvance","ɵɵproperty"],"sources":["/home/layth/Desktop/front/front/src/app/layouts/full/full.component.ts","/home/layth/Desktop/front/front/src/app/layouts/full/full.component.html"],"sourcesContent":["import { BreakpointObserver } from '@angular/cdk/layout';\nimport { Component, OnInit, ViewChild } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { MatSidenav } from '@angular/material/sidenav';\n\nconst MOBILE_VIEW = 'screen and (max-width: 768px)';\nconst TABLET_VIEW = 'screen and (min-width: 769px) and (max-width: 1024px)';\nconst MONITOR_VIEW = 'screen and (min-width: 1024px)';\n\n@Component({\n  selector: 'app-full',\n  templateUrl: './full.component.html',\n  styleUrls: [],\n})\nexport class FullComponent implements OnInit {\n\n  @ViewChild('leftsidenav')\n  public sidenav: MatSidenav | any;\n\n  //get options from service\n  private layoutChangesSubscription = Subscription.EMPTY;\n  private isMobileScreen = false;\n  private isContentWidthFixed = true;\n  private isCollapsedWidthFixed = false;\n  private htmlElement!: HTMLHtmlElement;\n\n  get isOver(): boolean {\n    return this.isMobileScreen;\n  }\n\n  constructor(private breakpointObserver: BreakpointObserver) {\n    this.htmlElement = document.querySelector('html')!;\n    this.layoutChangesSubscription = this.breakpointObserver\n      .observe([MOBILE_VIEW, TABLET_VIEW, MONITOR_VIEW])\n      .subscribe((state) => {\n        // SidenavOpened must be reset true when layout changes\n\n        this.isMobileScreen = state.breakpoints[MOBILE_VIEW];\n\n        this.isContentWidthFixed = state.breakpoints[MONITOR_VIEW];\n      });\n  }\n\n  ngOnInit(): void {}\n\n  ngOnDestroy() {\n    this.layoutChangesSubscription.unsubscribe();\n  }\n\n  toggleCollapsed() {\n    this.isContentWidthFixed = false;\n  }\n\n  onSidenavClosedStart() {\n    this.isContentWidthFixed = false;\n  }\n\n  onSidenavOpenedChange(isOpened: boolean) {\n    this.isCollapsedWidthFixed = !this.isOver;\n  }\n}\n","<mat-sidenav-container\n  class=\"mainWrapper blue_theme  light-theme\"\n  autosize\n  autoFocus\n  dir=\"ltr\"\n>\n  <!-- ============================================================== -->\n  <!-- Vertical Sidebar -->\n  <!-- ============================================================== -->\n\n  <mat-sidenav\n    #leftsidenav\n    [mode]=\"isOver ? 'over' : 'side'\"\n    [opened]=\"!isOver\"\n    (openedChange)=\"onSidenavOpenedChange($event)\"\n    (closedStart)=\"onSidenavClosedStart()\"\n    class=\"sidebarNav\"\n  >\n    <app-sidebar></app-sidebar>\n  </mat-sidenav>\n  <!-- ============================================================== -->\n  <!-- Main Content -->\n  <!-- ============================================================== -->\n  <mat-sidenav-content class=\"contentWrapper\">\n    <!-- ============================================================== -->\n    <!-- VerticalHeader -->\n    <!-- ============================================================== -->\n\n    <app-header>\n     <p>hello</p>\n    ></app-header>\n\n    <main class=\"pageWrapper\">\n      <!-- ============================================================== -->\n      <!-- Outlet -->\n      <!-- ============================================================== -->\n      <router-outlet></router-outlet>\n    </main>\n  </mat-sidenav-content>\n</mat-sidenav-container>\n"],"mappings":"AAEA,SAASA,YAAY,QAAQ,MAAM;;;;;;;;;AAGnC,MAAMC,WAAW,GAAG,+BAA+B;AACnD,MAAMC,WAAW,GAAG,uDAAuD;AAC3E,MAAMC,YAAY,GAAG,gCAAgC;AAOrD,OAAM,MAAOC,aAAa;EAYxB,IAAIC,MAAMA,CAAA;IACR,OAAO,IAAI,CAACC,cAAc;EAC5B;EAEAC,YAAoBC,kBAAsC;IAAtC,KAAAA,kBAAkB,GAAlBA,kBAAkB;IAXtC;IACQ,KAAAC,yBAAyB,GAAGT,YAAY,CAACU,KAAK;IAC9C,KAAAJ,cAAc,GAAG,KAAK;IACtB,KAAAK,mBAAmB,GAAG,IAAI;IAC1B,KAAAC,qBAAqB,GAAG,KAAK;IAQnC,IAAI,CAACC,WAAW,GAAGC,QAAQ,CAACC,aAAa,CAAC,MAAM,CAAE;IAClD,IAAI,CAACN,yBAAyB,GAAG,IAAI,CAACD,kBAAkB,CACrDQ,OAAO,CAAC,CAACf,WAAW,EAAEC,WAAW,EAAEC,YAAY,CAAC,CAAC,CACjDc,SAAS,CAAEC,KAAK,IAAI;MACnB;MAEA,IAAI,CAACZ,cAAc,GAAGY,KAAK,CAACC,WAAW,CAAClB,WAAW,CAAC;MAEpD,IAAI,CAACU,mBAAmB,GAAGO,KAAK,CAACC,WAAW,CAAChB,YAAY,CAAC;IAC5D,CAAC,CAAC;EACN;EAEAiB,QAAQA,CAAA,GAAU;EAElBC,WAAWA,CAAA;IACT,IAAI,CAACZ,yBAAyB,CAACa,WAAW,EAAE;EAC9C;EAEAC,eAAeA,CAAA;IACb,IAAI,CAACZ,mBAAmB,GAAG,KAAK;EAClC;EAEAa,oBAAoBA,CAAA;IAClB,IAAI,CAACb,mBAAmB,GAAG,KAAK;EAClC;EAEAc,qBAAqBA,CAACC,QAAiB;IACrC,IAAI,CAACd,qBAAqB,GAAG,CAAC,IAAI,CAACP,MAAM;EAC3C;;;uBA7CWD,aAAa,EAAAuB,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,kBAAA;IAAA;EAAA;;;YAAb1B,aAAa;MAAA2B,SAAA;MAAAC,SAAA,WAAAC,oBAAAC,EAAA,EAAAC,GAAA;QAAA,IAAAD,EAAA;;;;;;;;;;;;;;UCJxBP,EAVF,CAAAS,cAAA,+BAKC,wBAYE;UAFCT,EADA,CAAAU,UAAA,0BAAAC,2DAAAC,MAAA;YAAAZ,EAAA,CAAAa,aAAA,CAAAC,GAAA;YAAA,OAAAd,EAAA,CAAAe,WAAA,CAAgBP,GAAA,CAAAV,qBAAA,CAAAc,MAAA,CAA6B;UAAA,EAAC,yBAAAI,0DAAA;YAAAhB,EAAA,CAAAa,aAAA,CAAAC,GAAA;YAAA,OAAAd,EAAA,CAAAe,WAAA,CAC/BP,GAAA,CAAAX,oBAAA,EAAsB;UAAA,EAAC;UAGtCG,EAAA,CAAAiB,SAAA,kBAA2B;UAC7BjB,EAAA,CAAAkB,YAAA,EAAc;UAUXlB,EANH,CAAAS,cAAA,6BAA4C,iBAK9B,QACR;UAAAT,EAAA,CAAAmB,MAAA,YAAK;UAAAnB,EAAA,CAAAkB,YAAA,EAAI;UACblB,EAAA,CAAAmB,MAAA,SAAC;UAAAnB,EAAA,CAAAkB,YAAA,EAAa;UAEdlB,EAAA,CAAAS,cAAA,cAA0B;UAIxBT,EAAA,CAAAiB,SAAA,qBAA+B;UAGrCjB,EAFI,CAAAkB,YAAA,EAAO,EACa,EACA;;;UA3BpBlB,EAAA,CAAAoB,SAAA,EAAiC;UACjCpB,EADA,CAAAqB,UAAA,SAAAb,GAAA,CAAA9B,MAAA,mBAAiC,YAAA8B,GAAA,CAAA9B,MAAA,CACf","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}