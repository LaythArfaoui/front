{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, tap, throwError } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst BASE_URL = \"https://springboot-render-5-vor0.onrender.com/api/\";\nexport class AuthserviceService {\n  constructor(http) {\n    this.http = http;\n  }\n  register(registerData) {\n    return this.http.post(`${BASE_URL}/register`, registerData);\n  }\n  authenticate(authData) {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json'\n    });\n    console.log('Request Data:', authData);\n    return this.http.post('https://springboot-render-5-vor0.onrender.com/api/Authenticate', authData, {\n      headers,\n      observe: 'response'\n    }).pipe(tap(response => console.log('Response:', response)), catchError(error => {\n      console.error('Error Response:', error);\n      return throwError(error);\n    }));\n  }\n  saveToken(token) {\n    localStorage.setItem('jwtToken', token);\n  }\n  getToken() {\n    return localStorage.getItem('jwtToken');\n  }\n  logout() {\n    localStorage.removeItem('jwtToken');\n  }\n  getProtectedResource() {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${BASE_URL}/protected-resource`, {\n      headers\n    });\n  }\n  getAllUsers() {\n    return this.http.get(BASE_URL);\n  }\n  static {\n    this.ɵfac = function AuthserviceService_Factory(t) {\n      return new (t || AuthserviceService)(i0.ɵɵinject(i1.HttpClient));\n    };\n  }\n  static {\n    this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthserviceService,\n      factory: AuthserviceService.ɵfac,\n      providedIn: 'root'\n    });\n  }\n}","map":{"version":3,"names":["HttpHeaders","catchError","tap","throwError","BASE_URL","AuthserviceService","constructor","http","register","registerData","post","authenticate","authData","headers","console","log","observe","pipe","response","error","saveToken","token","localStorage","setItem","getToken","getItem","logout","removeItem","getProtectedResource","set","get","getAllUsers","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["/home/layth/Desktop/front/front/src/app/pages/authentication/authservice.service.ts"],"sourcesContent":["import { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { catchError, Observable, tap, throwError } from 'rxjs';\n\nconst BASE_URL = \"https://springboot-render-5-vor0.onrender.com/api/\";\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthserviceService {\n\n  constructor(private http: HttpClient) { }\n\n  register(registerData: any): Observable<any> {\n    return this.http.post(`${BASE_URL}/register`, registerData);\n  }\n\n  authenticate(authData: any): Observable<any> {\n    const headers = new HttpHeaders({\n      'Content-Type': 'application/json',\n    });\n  \n    console.log('Request Data:', authData);\n    return this.http.post('https://springboot-render-5-vor0.onrender.com/api/Authenticate', authData, { headers, observe: 'response' })\n      .pipe(\n        tap(response => console.log('Response:', response)),\n        catchError(error => {\n          console.error('Error Response:', error);\n          return throwError(error);\n        })\n      );\n  }\n  saveToken(token: string): void {\n    localStorage.setItem('jwtToken', token);\n  }\n\n  getToken(): string | null {\n    return localStorage.getItem('jwtToken');\n  }\n\n  logout(): void {\n    localStorage.removeItem('jwtToken');\n  }\n\n  getProtectedResource(): Observable<any> {\n    const token = localStorage.getItem('authToken');\n    const headers = new HttpHeaders().set('Authorization', `Bearer ${token}`);\n    return this.http.get(`${BASE_URL}/protected-resource`, { headers });\n  }\n\n  getAllUsers(): Observable<any[]> {\n    return this.http.get<any[]>(BASE_URL);\n  }\n}\n"],"mappings":"AAAA,SAAqBA,WAAW,QAAQ,sBAAsB;AAE9D,SAASC,UAAU,EAAcC,GAAG,EAAEC,UAAU,QAAQ,MAAM;;;AAE9D,MAAMC,QAAQ,GAAG,oDAAoD;AAKrE,OAAM,MAAOC,kBAAkB;EAE7BC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;EAAgB;EAExCC,QAAQA,CAACC,YAAiB;IACxB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAC,GAAGN,QAAQ,WAAW,EAAEK,YAAY,CAAC;EAC7D;EAEAE,YAAYA,CAACC,QAAa;IACxB,MAAMC,OAAO,GAAG,IAAIb,WAAW,CAAC;MAC9B,cAAc,EAAE;KACjB,CAAC;IAEFc,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEH,QAAQ,CAAC;IACtC,OAAO,IAAI,CAACL,IAAI,CAACG,IAAI,CAAC,gEAAgE,EAAEE,QAAQ,EAAE;MAAEC,OAAO;MAAEG,OAAO,EAAE;IAAU,CAAE,CAAC,CAChIC,IAAI,CACHf,GAAG,CAACgB,QAAQ,IAAIJ,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEG,QAAQ,CAAC,CAAC,EACnDjB,UAAU,CAACkB,KAAK,IAAG;MACjBL,OAAO,CAACK,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAAC;MACvC,OAAOhB,UAAU,CAACgB,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EACAC,SAASA,CAACC,KAAa;IACrBC,YAAY,CAACC,OAAO,CAAC,UAAU,EAAEF,KAAK,CAAC;EACzC;EAEAG,QAAQA,CAAA;IACN,OAAOF,YAAY,CAACG,OAAO,CAAC,UAAU,CAAC;EACzC;EAEAC,MAAMA,CAAA;IACJJ,YAAY,CAACK,UAAU,CAAC,UAAU,CAAC;EACrC;EAEAC,oBAAoBA,CAAA;IAClB,MAAMP,KAAK,GAAGC,YAAY,CAACG,OAAO,CAAC,WAAW,CAAC;IAC/C,MAAMZ,OAAO,GAAG,IAAIb,WAAW,EAAE,CAAC6B,GAAG,CAAC,eAAe,EAAE,UAAUR,KAAK,EAAE,CAAC;IACzE,OAAO,IAAI,CAACd,IAAI,CAACuB,GAAG,CAAC,GAAG1B,QAAQ,qBAAqB,EAAE;MAAES;IAAO,CAAE,CAAC;EACrE;EAEAkB,WAAWA,CAAA;IACT,OAAO,IAAI,CAACxB,IAAI,CAACuB,GAAG,CAAQ1B,QAAQ,CAAC;EACvC;;;uBA3CWC,kBAAkB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;IAAA;EAAA;;;aAAlB9B,kBAAkB;MAAA+B,OAAA,EAAlB/B,kBAAkB,CAAAgC,IAAA;MAAAC,UAAA,EAFjB;IAAM;EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}